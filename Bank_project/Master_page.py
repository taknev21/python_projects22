#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Mar 10, 2020 01:46:58 PM IST  platform: Windows NT

import sys
from tkinter import messagebox
from tkinter import *
from PIL import ImageTk

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import LoginPage_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = login(root)
    LoginPage_support.init(root, top)
    root.mainloop()


w = None


def create_login(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = login(w)
    LoginPage_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_login():
    global w
    w.destroy()
    w = None


def vp_start_gui_1():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    top = main_page (root)
    main_page_support.init(root, top)
    root.mainloop()

w = None

def create_main_page(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    rt = root
    w = tk.Toplevel (root)
    top = main_page (w)
    main_page_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_main_page():
    global w
    w.destroy()
    w = None


class login:

    def new_window(self):
        self.newWindow = Toplevel(self.top)
        self.app = main_page(self.newWindow)

    def loginbutton(self):
        name = self.txtUser.get();
        passwd = self.txtPass.get();
        branch = self.txtBranch.get();

        if name == "Admin" and passwd == "Admin" and branch == "bank123":
            messagebox.showinfo("Login Page", "Login Successful")
            new_window(self.new_window)
            
        else:
            messagebox.showwarning("Login Page", "Incorrect username & password")
            


    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font10 = "-family {Segoe UI Semibold} -size 9 -weight bold " \
                 "-slant roman -underline 0 -overstrike 0"
        font12 = "-family {Segoe Print} -size 9 -weight bold -slant " \
                 "roman -underline 1 -overstrike 0"
        font9 = "-family {Segoe UI} -size 11 -weight bold -slant " \
                "italic -underline 0 -overstrike 0"

        top.geometry("725x445+450+150")
        top.title("Login Page")
        top.configure(background="#d9d9d9")

        #====== ALL Image ===========
        self.comp_logo =PhotoImage(file="image/yotta_logo.png")
        self.bg_img = PhotoImage(file="image/bg_img2.png")

        labbg=Label(top,image=self.bg_img).pack()
        #lablogo=Label(top,image=self.comp_logo).grid(row=0,column=2,pady=20)


        self.labelUser = tk.Label(top)
        self.labelUser.place(relx=0.317, rely=0.247, height=31, width=85)
        self.labelUser.configure(background="#d9d9d9")
        self.labelUser.configure(disabledforeground="#a3a3a3")
        self.labelUser.configure(font=font10)
        self.labelUser.configure(foreground="#000000")
        self.labelUser.configure(text='''User ID''')

        self.labPass = tk.Label(top)
        self.labPass.place(relx=0.317, rely=0.382, height=31, width=85)
        self.labPass.configure(background="#d9d9d9")
        self.labPass.configure(disabledforeground="#a3a3a3")
        self.labPass.configure(font=font10)
        self.labPass.configure(foreground="#000000")
        self.labPass.configure(text='''Password''')

        self.labBranch = tk.Label(top)
        self.labBranch.place(relx=0.317, rely=0.539, height=31, width=85)
        self.labBranch.configure(background="#d9d9d9")
        self.labBranch.configure(disabledforeground="#a3a3a3")
        self.labBranch.configure(font=font10)
        self.labBranch.configure(foreground="#000000")
        self.labBranch.configure(text='''Branch Code''')

        self.btnLogin = tk.Button(top)
        self.btnLogin.place(relx=0.607, rely=0.674, height=30, width=70)
        self.btnLogin.configure(activebackground="#ececec")
        self.btnLogin.configure(activeforeground="#000000")
        self.btnLogin.configure(background="#d9d9d9")
        self.btnLogin.configure(disabledforeground="#a3a3a3")
        self.btnLogin.configure(font=font9)
        self.btnLogin.configure(foreground="#000000")
        self.btnLogin.configure(highlightbackground="#d9d9d9")
        self.btnLogin.configure(highlightcolor="black")
        self.btnLogin.configure(pady="0")
        self.btnLogin.configure(text='''Login''')
        self.btnLogin.configure(command=self.loginbutton);

        self.txtUser = tk.Entry(top)
        self.txtUser.place(relx=0.579, rely=0.247, height=26, relwidth=0.200)
        self.txtUser.configure(background="white")
        self.txtUser.configure(disabledforeground="#a3a3a3")
        self.txtUser.configure(font="TkFixedFont")
        self.txtUser.configure(foreground="#000000")
        self.txtUser.configure(insertbackground="black")

        self.txtPass = tk.Entry(top)
        self.txtPass.place(relx=0.579, rely=0.404, height=26, relwidth=0.200)
        self.txtPass.configure(background="white")
        self.txtPass.configure(disabledforeground="#a3a3a3")
        self.txtPass.configure(font="TkFixedFont")
        self.txtPass.configure(foreground="#000000")
        self.txtPass.configure(insertbackground="black")

        self.txtBranch = tk.Entry(top)
        self.txtBranch.place(relx=0.579, rely=0.539, height=26, relwidth=0.200)
        self.txtBranch.configure(background="white")
        self.txtBranch.configure(disabledforeground="#a3a3a3")
        self.txtBranch.configure(font="TkFixedFont")
        self.txtBranch.configure(foreground="#000000")
        self.txtBranch.configure(insertbackground="black")

        self.Labcomp = tk.Label(top)
        self.Labcomp.place(relx=0.65, rely=0.921, height=31, width=240)
        self.Labcomp.configure(background="#d9d9d9")
        self.Labcomp.configure(disabledforeground="#a3a3a3")
        self.Labcomp.configure(font=font12)
        self.Labcomp.configure(foreground="#000000")
        self.Labcomp.configure(text='''powered by : Yotta softech solution''')

        #self.LabLogo = tk.Label(top)
        #self.LabLogo.place(height=120, width=120)
        #root = Tk()
        #photo = PhotoImage(file = r"E:\Bank_project\yotta_logo.gif")
        #self.LabLogo = photo.pack(side = LEFT)
        #LabLogo = grid()
        #LabLogo = tk.Label(top, image = photo).pack(side = LEFT)




class main_page:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1038x773+315+133")
        top.title("Main Page")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#6ed8d8")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                #command=main_page_support.{},
                font="TkMenuFont",
                foreground="#000000",
                label="Report")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                #command=main_page_support.{},
                font="TkMenuFont",
                foreground="#000000",
                label="GL")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                #command=main_page_support.{},
                font="TkMenuFont",
                foreground="#000000",
                label="eJ")
        self.sub_menu.add_separator(
                background="#d9d9d9")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                #command=main_page_support.{},
                font="TkMenuFont",
                foreground="#000000",
                label="eJFinTxn")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                #command=main_page_support.{},
                font="TkMenuFont",
                foreground="#000000",
                label="eJNotInGL")
        self.sub_menu.add_separator(
                background="#d9d9d9")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                #command=main_page_support.{},
                font="TkMenuFont",
                foreground="#000000",
                label="NotInHost")
        self.sub_menu.add_separator(
                background="#d9d9d9")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                #command=main_page_support.{},
                font="TkMenuFont",
                foreground="#000000",
                label="OTHonUSGLTxn")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                #command=main_page_support.{},
                font="TkMenuFont",
                foreground="#000000",
                label="USonUSGLTxn")
        self.sub_menu1 = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                #command=main_page_support.{},
                font="TkMenuFont",
                foreground="#000000",
                label="Help")
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                #command=main_page_support.{},
                font="TkMenuFont",
                foreground="#000000",
                label="Guide")
        self.sub_menu1.add_separator(
                background="#d9d9d9")
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                #command=main_page_support.{},
                font="TkMenuFont",
                foreground="#000000",
                label="About us")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.019, rely=0.065, relheight=0.446
                , relwidth=0.968)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.btn_clear = tk.Button(self.Frame1)
        self.btn_clear.place(relx=0.597, rely=0.58, height=42, width=118)
        self.btn_clear.configure(activebackground="#ececec")
        self.btn_clear.configure(activeforeground="#000000")
        self.btn_clear.configure(background="#d9d9d9")
        self.btn_clear.configure(disabledforeground="#a3a3a3")
        self.btn_clear.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.btn_clear.configure(foreground="#000000")
        self.btn_clear.configure(highlightbackground="#d9d9d9")
        self.btn_clear.configure(highlightcolor="black")
        self.btn_clear.configure(pady="0")
        self.btn_clear.configure(text='''Clear Data''')

        self.btn_imp_ej = tk.Button(self.Frame1)
        self.btn_imp_ej.place(relx=0.408, rely=0.58, height=42, width=118)
        self.btn_imp_ej.configure(activebackground="#ececec")
        self.btn_imp_ej.configure(activeforeground="#000000")
        self.btn_imp_ej.configure(background="#d9d9d9")
        self.btn_imp_ej.configure(disabledforeground="#a3a3a3")
        self.btn_imp_ej.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.btn_imp_ej.configure(foreground="#000000")
        self.btn_imp_ej.configure(highlightbackground="#d9d9d9")
        self.btn_imp_ej.configure(highlightcolor="black")
        self.btn_imp_ej.configure(pady="0")
        self.btn_imp_ej.configure(text='''Import eJ''')

        self.btn_imp_gl = tk.Button(self.Frame1)
        self.btn_imp_gl.place(relx=0.229, rely=0.58, height=42, width=118)
        self.btn_imp_gl.configure(activebackground="#ececec")
        self.btn_imp_gl.configure(activeforeground="#000000")
        self.btn_imp_gl.configure(background="#d9d9d9")
        self.btn_imp_gl.configure(disabledforeground="#a3a3a3")
        self.btn_imp_gl.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.btn_imp_gl.configure(foreground="#000000")
        self.btn_imp_gl.configure(highlightbackground="#d9d9d9")
        self.btn_imp_gl.configure(highlightcolor="black")
        self.btn_imp_gl.configure(pady="0")
        self.btn_imp_gl.configure(text='''Import GL''')

        self.Frame2 = tk.Frame(top)
        self.Frame2.place(relx=0.154, rely=0.53, relheight=0.343, relwidth=0.689)

        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")

        self.btn_recon = tk.Button(self.Frame2)
        self.btn_recon.place(relx=0.35, rely=0.415, height=52, width=198)
        self.btn_recon.configure(activebackground="#ececec")
        self.btn_recon.configure(activeforeground="#000000")
        self.btn_recon.configure(background="#d9d9d9")
        self.btn_recon.configure(disabledforeground="#a3a3a3")
        self.btn_recon.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.btn_recon.configure(foreground="#000000")
        self.btn_recon.configure(highlightbackground="#d9d9d9")
        self.btn_recon.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location,"../Bank_project/image/start-botton_new.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.btn_recon.configure(image=_img0)
        self.btn_recon.configure(pady="0")

        self.lab_process = tk.Label(self.Frame2)
        self.lab_process.place(relx=0.336, rely=0.038, height=31, width=187)
        self.lab_process.configure(activebackground="#f9f9f9")
        self.lab_process.configure(activeforeground="black")
        self.lab_process.configure(background="#d9d9d9")
        self.lab_process.configure(disabledforeground="#a3a3a3")
        self.lab_process.configure(font="-family {Segoe UI} -size 9 -weight bold -underline 1")
        self.lab_process.configure(foreground="#000000")
        self.lab_process.configure(highlightbackground="#d9d9d9")
        self.lab_process.configure(highlightcolor="black")
        self.lab_process.configure(text='''Data Processing''')

        self.Lab_atm = tk.Label(top)
        self.Lab_atm.place(relx=0.193, rely=0.078, height=41, width=667)
        self.Lab_atm.configure(activebackground="#f9f9f9")
        self.Lab_atm.configure(activeforeground="black")
        self.Lab_atm.configure(background="#d9d9d9")
        self.Lab_atm.configure(disabledforeground="#a3a3a3")
        self.Lab_atm.configure(font="-family {Segoe UI} -size 17 -weight bold -underline 1")
        self.Lab_atm.configure(foreground="#000000")
        self.Lab_atm.configure(highlightbackground="#d9d9d9")
        self.Lab_atm.configure(highlightcolor="black")
        self.Lab_atm.configure(text='''ATM RECONCILIATION''')

        self.lab_comp1 = tk.Label(top)
        self.lab_comp1.place(relx=0.684, rely=0.957, height=31, width=307)
        self.lab_comp1.configure(activebackground="#f9f9f9")
        self.lab_comp1.configure(activeforeground="black")
        self.lab_comp1.configure(background="#d9d9d9")
        self.lab_comp1.configure(disabledforeground="#a3a3a3")
        self.lab_comp1.configure(font="-family {Segoe UI} -size 9 -weight bold -slant italic -underline 1")
        self.lab_comp1.configure(foreground="#000000")
        self.lab_comp1.configure(highlightbackground="#d9d9d9")
        self.lab_comp1.configure(highlightcolor="black")
        self.lab_comp1.configure(text='''powered by: Yotta softech solution''')





if __name__ == '__main__':
    vp_start_gui()
